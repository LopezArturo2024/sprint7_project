import streamlit as st
import pandas as pd
import plotly.graph_objects as go


# Leer los datos del archivo CSV
# -----------------------------------------------
car_data = pd.read_csv('vehicles_us.csv')


# T칤tulo de la aplicaci칩n
# -----------------------------------------------
st.title("游뚲  Exploraci칩n de ventas de veh칤culos")
st.write("춰Bienvenido!")
st.write(""" Esta esta app te permitir치 conocer a profundidad los diferentes veh칤culos listados para la venta. 
        A trav칠s de diferentes visualizaciones podr치s encontrar e identifcar patrones de precio seg칰n las diferentes 
        categor칤as registradas.""")


# 1. Tabla exploratoria de los datos
# -----------------------------------------------
st.subheader("游늵 Vista previa del dataset")
st.write("""Primero conozcamos un poco nuestros datos""")
st.dataframe(car_data.sample(10))


# 2. Gr치fico de barras del promedio de precios por a침o modelo del veh칤culo
# -----------------------------------------------
st.subheader("游눯 Promedio de precios de los veh칤culos listados")
st.write("De esta forma podemos revisar por a침os el costo promedio de los veh칤culos listados")

df_avg_precios = car_data.groupby('model_year')['price'].mean(
).reset_index().sort_values(by='price', ascending=False)

filtro = st.selectbox("Selecciona un rango de a침os:",
                      ("Todos", "2000 - 2010", "> 2010",
                       "1990 - 2000", "1980 - 1990", "< 1980")
                      )

if filtro == "2000 - 2010":
    df_filtrado = df_avg_precios.query(
        "model_year > 2000 and model_year <= 2010")
elif filtro == "> 2010":
    df_filtrado = df_avg_precios.query("model_year > 2010")
elif filtro == "1990 - 2000":
    df_filtrado = df_avg_precios.query(
        "model_year > 1990 and model_year <= 2000")
elif filtro == "1980 - 1990":
    df_filtrado = df_avg_precios.query(
        "model_year > 1980 and model_year <= 1990")
elif filtro == "< 1980":
    df_filtrado = df_avg_precios.query("model_year <= 1980")
else:
    df_filtrado = df_avg_precios.copy()

fig = go.Figure(data=[go.Bar(
    x=df_filtrado["model_year"], y=df_filtrado["price"],
    text=df_filtrado["price"].round(2)
)])

fig.update_layout(title_text=f"Precio promedio de los veh칤culos por a침o del modelo ({filtro})",
                  xaxis_title="Modelo del auto (A침os)",
                  yaxis_title="Precio promedio (USD)",
                  uniformtext_minsize=6)

fig.update_traces(
    textposition="outside",
    textfont=dict(
        size=10,
        family="Arial Black"
    )
)
st.plotly_chart(fig, use_container_width=True)


# 3. Cantidad de autos listados por categor칤as (fuel, transmission, condition)
# -----------------------------------------------
st.subheader("游뚲 Cantidad de autos listados por categor칤a")
st.write("Podemos encontrar la cantidad de autos listados seg칰n su condici칩n, el tipo de combustible y su transmisi칩n")

fuel_checkbox = st.checkbox('Listado por tipo de combustible')
condition_checkbox = st.checkbox('Listado por condici칩n del veh칤culo')
transmission_checkbox = st.checkbox('Listado por tipo de transmisi칩n')

if condition_checkbox:
    condition_vehicles = car_data['condition'].value_counts().reset_index()

    fig = go.Figure(data=[go.Bar(
        x=condition_vehicles["condition"], y=condition_vehicles["count"],
        text=condition_vehicles["count"]
    )])

    fig.update_layout(title_text="Listado de veh칤culos por condici칩n",
                      xaxis_title="Condici칩n del veh칤culo",
                      yaxis_title="Cantidad de veh칤culos listados",
                      uniformtext_minsize=6)

    fig.update_traces(
        textposition="outside",
        textfont=dict(
            size=10,
            family="Arial Black"
        )
    )

    st.plotly_chart(fig, use_container_width=True)

if fuel_checkbox:
    fuel_vehicles = car_data['fuel'].value_counts().reset_index()

    fig = go.Figure(data=[go.Bar(
        x=fuel_vehicles["fuel"], y=fuel_vehicles["count"],
        text=fuel_vehicles["count"]
    )])

    fig.update_layout(title_text="Listado de veh칤culos por tipo de combustible",
                      xaxis_title="Tipo de combustible",
                      yaxis_title="Cantidad de veh칤culos listados",
                      uniformtext_minsize=6)

    fig.update_traces(
        textposition="outside",
        textfont=dict(
            size=10,
            family="Arial Black"
        )
    )

    st.plotly_chart(fig, use_container_width=True)

if transmission_checkbox:
    transmission_vehicles = car_data['transmission'].value_counts(
    ).reset_index()

    fig = go.Figure(data=[go.Bar(
        x=transmission_vehicles["transmission"], y=transmission_vehicles["count"],
        text=transmission_vehicles["count"]
    )])

    fig.update_layout(title_text="Listado de veh칤culos por tipo de transmisi칩n",
                      xaxis_title="Tipo de transmisi칩n",
                      yaxis_title="Cantidad de veh칤culos listados",
                      uniformtext_minsize=6)

    fig.update_traces(
        textposition="outside",
        textfont=dict(
            size=10,
            family="Arial Black"
        )
    )

    st.plotly_chart(fig, use_container_width=True)


# 4. Distribuci칩n de precios por categor칤as (fuel, transmission, condition) - Histogramas
# -----------------------------------------------

st.subheader("游눳 Distribuci칩n de precios por categor칤as")

fuel_button = st.button('Crear histograma de precios por tipo de combustible')
condition_button = st.button(
    'Crear histograma de precios por condici칩n del veh칤culo')
transmission_button = st.button(
    'Crear histograma de precios por tipo de transmisi칩n')

if fuel_button:
    fuel_options = list(car_data['fuel'].unique())

    st.write(
        "Contruyendo la distribuci칩n de precios para cada tipo de combustible de los veh칤culos listados")
    fig = go.Figure()

    for option in fuel_options:
        filtered_data = car_data[car_data['fuel'] == option]
        fig.add_trace(go.Histogram(
            x=filtered_data['price'], nbinsx=50, name=option))

    fig.update_layout(barmode='overlay',
                      title_text="Distribuci칩n de precios por tipo de combustible",
                      xaxis_title="Precio (USD)",
                      yaxis_title="Frecuencia",
                      uniformtext_minsize=6,
                      xaxis=dict(range=[0, 80000]))

    fig.update_traces(opacity=0.4)

    st.plotly_chart(fig, use_container_width=True)

if transmission_button:
    transmission_options = list(car_data['transmission'].unique())
    st.write(
        "Contruyendo la distribuci칩n de precios para cada tipo de transmisi칩n de los veh칤culos listados")

    fig = go.Figure()

    for option in transmission_options:
        filtered_data = car_data[car_data['transmission'] == option]
        fig.add_trace(go.Histogram(
            x=filtered_data['price'], nbinsx=50, name=option))

    fig.update_layout(barmode='overlay',
                      title_text="Distribuci칩n de precios por tipo de transmisi칩n",
                      xaxis_title="Precio (USD)",
                      yaxis_title="Frecuencia",
                      uniformtext_minsize=6,
                      xaxis=dict(range=[0, 80000]))

    fig.update_traces(opacity=0.4)
    st.plotly_chart(fig, use_container_width=True)


if condition_button:
    condition_options = list(car_data['condition'].unique())
    st.write(
        "Contruyendo la distribuci칩n de precios por cada tipo de condici칩n de los veh칤culos listados")
    fig = go.Figure()

    for option in condition_options:
        filtered_data = car_data[car_data['condition'] == option]
        fig.add_trace(go.Histogram(
            x=filtered_data['price'], nbinsx=50, name=option))

    fig.update_layout(barmode='overlay',
                      title_text="Distribuci칩n de precios por condici칩n del veh칤culo",
                      xaxis_title="Precio (USD)",
                      yaxis_title="Frecuencia",
                      uniformtext_minsize=6,
                      xaxis=dict(range=[0, 80000]))

    fig.update_traces(opacity=0.4)
    st.plotly_chart(fig, use_container_width=True)


# 5. Distribuci칩n general de precios y od칩metro - Histogramas
# -----------------------------------------------
st.subheader("游뚳 Histograma general de precios y od칩metro")
st.write("Veamos como se comporta la distribuci칩n general de precios y la lectura del od칩metro de los veh칤culos listados")

price_button = st.button('Crear histograma de precios')
odometer_button = st.button('Crear histograma del od칩metro')

if price_button:
    st.write(
        "Contruyendo la distribuci칩n de precios general de los veh칤culos listados")
    fig = go.Figure(data=[go.Histogram(x=car_data['price'], nbinsx=50)])

    fig.update_layout(title_text="Distribuci칩n de precios de los veh칤culos listados",
                      xaxis_title="Precio (USD)",
                      yaxis_title="Cantidad de veh칤culos",
                      uniformtext_minsize=6,
                      xaxis=dict(range=[0, 150000]))

    st.plotly_chart(fig, use_container_width=True)

    st.write("Estad칤sticas descriptivas de los precios de los veh칤culos listados")
    price_statistics = car_data['price'].describe().round(2).reset_index()
    price_statistics.columns = ['Medida', 'Valor']
    st.dataframe(price_statistics)

if odometer_button:
    fig = go.Figure(data=[go.Histogram(x=car_data['odometer'], nbinsx=50)])

    fig.update_layout(title_text="Distribuci칩n de lectura del od칩metro de los veh칤culos listados",
                      xaxis_title="Od칩metro (millas)",
                      yaxis_title="Cantidad de veh칤culos",
                      uniformtext_minsize=6)

    st.plotly_chart(fig, use_container_width=True)

    st.write(
        "Estad칤sticas descriptivas de la lectura del od칩metro de los veh칤culos listados")
    odometer_statistics = car_data['odometer'].describe().round(
        2).reset_index()
    odometer_statistics.columns = ['Medida', 'Valor']
    st.dataframe(odometer_statistics)


# 6. Relaci칩n entre el precio y categor칤as del veh칤culo (Scatter plots)
# -----------------------------------------------
st.subheader("游닄 Relaci칩n entre el precio y categor칤as del veh칤culo")

filtro = st.selectbox("Selecciona la categor칤a que quieres analizar:",
                      ("Condici칩n del veh칤culo", "Tipo de Transmisi칩n",
                       "Tipo de veh칤culo", "od칩metro", "A침o del modelo")
                      )

if filtro == "Condici칩n del veh칤culo":
    st.write(
        "Contruyendo la dispersi칩n de precios seg칰n la condici칩n del veh칤culo")
    fig = go.Figure(
        data=[go.Scatter(x=car_data['condition'], y=car_data['price'], mode='markers')])

    fig.update_layout(title_text="Dispersi칩n de precio por condici칩n del veh칤culo",
                      xaxis_title="Condici칩n del veh칤culo",
                      yaxis_title="Precio (USD)",
                      uniformtext_minsize=6)
    st.plotly_chart(fig, use_container_width=True)

elif filtro == "Tipo de Transmisi칩n":
    st.write(
        "Contruyendo la dispersi칩n de precios seg칰n el tipo de transmisi칩n del veh칤culo")
    fig = go.Figure(data=[go.Scatter(
        x=car_data['transmission'], y=car_data['price'], mode='markers')])

    fig.update_layout(title_text="Dispersi칩n de precio por transmisi칩n del veh칤culo",
                      xaxis_title="Transmisi칩n del veh칤culo",
                      yaxis_title="Precio (USD)",
                      uniformtext_minsize=6)
    st.plotly_chart(fig, use_container_width=True)

elif filtro == "Tipo de veh칤culo":
    st.write("Contruyendo la dispersi칩n de precios seg칰n el tipo de veh칤culo")
    fig = go.Figure(data=[go.Scatter(x=car_data['type'],
                    y=car_data['price'], mode='markers')])

    fig.update_layout(title_text="Dispersi칩n de precio por tipo de veh칤culo",
                      xaxis_title="Tipo de veh칤culo",
                      yaxis_title="Precio (USD)",
                      uniformtext_minsize=6)
    st.plotly_chart(fig, use_container_width=True)

elif filtro == "od칩metro":
    st.write(
        "Contruyendo la dispersi칩n de precios seg칰n la lectura del od칩metro del veh칤culo")
    fig = go.Figure(
        data=[go.Scatter(x=car_data['odometer'], y=car_data['price'], mode='markers')])

    fig.update_layout(title_text="Dispersi칩n de precio por recorrido del veh칤culo",
                      xaxis_title="Lectura del od칩metro (millas)",
                      yaxis_title="Precio (USD)",
                      uniformtext_minsize=6)
    st.plotly_chart(fig, use_container_width=True)

else:
    st.write(
        "Contruyendo la dispersi칩n de precios seg칰n el a침o del modelo")
    fig = go.Figure(data=[go.Scatter(
        x=car_data['model_year'], y=car_data['price'], mode='markers')])

    fig.update_layout(title_text="Dispersi칩n de precio por a침o del veh칤culo",
                      xaxis_title="A침o del modelo",
                      yaxis_title="Precio (USD)",
                      uniformtext_minsize=6)
    st.plotly_chart(fig, use_container_width=True)
